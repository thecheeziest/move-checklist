"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/shared/stores/checklistStore.ts":
/*!*********************************************!*\
  !*** ./src/shared/stores/checklistStore.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChecklistStore: () => (/* binding */ useChecklistStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var _api_purchase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/purchase */ \"(app-pages-browser)/./src/shared/api/purchase.ts\");\n\n\n// 천 단위 쉼표 추가 함수\nconst formatPrice = (price)=>{\n    const numPrice = typeof price === 'string' ? parseInt(price.replace(/,/g, '')) : price;\n    return numPrice.toLocaleString();\n};\nconst initialPurchaseForm = {\n    category: '기타',\n    brand: '',\n    title: '',\n    price: '',\n    purchasedDate: '',\n    isPurchased: false,\n    option: '',\n    memo: '',\n    url: ''\n};\nconst useChecklistStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set, get)=>({\n        items: [],\n        selectedItem: null,\n        isDetailPanelOpen: false,\n        isAddFormOpen: false,\n        purchaseForm: initialPurchaseForm,\n        isLoading: false,\n        error: null,\n        fetchItems: async ()=>{\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                const items = (await (0,_api_purchase__WEBPACK_IMPORTED_MODULE_0__.fetchPurchaseItems)()).map((item)=>({\n                        ...item,\n                        category: item.category,\n                        price: formatPrice(item.price),\n                        createdAt: new Date(item.createdAt),\n                        updatedAt: new Date(item.updatedAt)\n                    }));\n                set({\n                    items,\n                    isLoading: false\n                });\n            } catch (e) {\n                if (e.message.includes('500')) {\n                    window.alert('서버가 주것습니다 -- ;;');\n                } else {\n                    window.alert(e.message);\n                }\n                set({\n                    error: e.message,\n                    isLoading: false\n                });\n            }\n        },\n        addItem: async (formData)=>{\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                const req = {\n                    category: formData.category,\n                    brand: formData.brand || undefined,\n                    title: formData.title,\n                    price: formData.price.replace(/,/g, ''),\n                    purchasedDate: formData.purchasedDate || undefined,\n                    isPurchased: formData.isPurchased,\n                    option: formData.option || undefined,\n                    memo: formData.memo || undefined,\n                    url: formData.url || undefined\n                };\n                const newItemRaw = await (0,_api_purchase__WEBPACK_IMPORTED_MODULE_0__.createPurchaseItem)(req);\n                const newItem = {\n                    ...newItemRaw,\n                    category: newItemRaw.category,\n                    price: formatPrice(newItemRaw.price),\n                    createdAt: new Date(newItemRaw.createdAt),\n                    updatedAt: new Date(newItemRaw.updatedAt)\n                };\n                set((state)=>({\n                        items: [\n                            ...state.items,\n                            newItem\n                        ],\n                        isLoading: false,\n                        isAddFormOpen: false,\n                        isDetailPanelOpen: false,\n                        selectedItem: null\n                    }));\n                window.alert('항목을 추가했어요 ! !');\n                get().resetPurchaseForm();\n            } catch (e) {\n                if (e.message.includes('400')) {\n                    window.alert('잘못 입력햇다 햇짠아 ! ! !');\n                } else if (e.message.includes('500')) {\n                    window.alert('서버가 주것습니다 -- ;;');\n                } else {\n                    window.alert('먼지 모를 오류라네요');\n                }\n                set({\n                    error: e.message,\n                    isLoading: false\n                });\n            }\n        },\n        updateItem: async (id, item)=>{\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                var _item_price;\n                // undefined 값들을 제거하고 실제 값만 포함\n                const updateData = {};\n                if (item.category !== undefined) updateData.category = item.category;\n                if (item.brand !== undefined) updateData.brand = item.brand;\n                if (item.title !== undefined) updateData.title = item.title;\n                if (item.price !== undefined) updateData.price = (_item_price = item.price) === null || _item_price === void 0 ? void 0 : _item_price.replace(/,/g, '');\n                if (item.purchasedDate !== undefined) updateData.purchasedDate = item.purchasedDate;\n                if (item.isPurchased !== undefined) updateData.isPurchased = item.isPurchased;\n                if (item.option !== undefined) updateData.option = item.option;\n                if (item.memo !== undefined) updateData.memo = item.memo;\n                if (item.url !== undefined) updateData.url = item.url;\n                // purchasedDate가 undefined인 경우 명시적으로 null로 설정\n                if (item.purchasedDate === undefined && item.isPurchased === false) {\n                    updateData.purchasedDate = null;\n                }\n                const req = {\n                    id,\n                    ...updateData\n                };\n                const updatedRaw = await (0,_api_purchase__WEBPACK_IMPORTED_MODULE_0__.updatePurchaseItem)(id, req);\n                const updated = {\n                    ...updatedRaw,\n                    category: updatedRaw.category,\n                    price: formatPrice(updatedRaw.price),\n                    createdAt: new Date(updatedRaw.createdAt),\n                    updatedAt: new Date(updatedRaw.updatedAt)\n                };\n                set((state)=>({\n                        items: state.items.map((item)=>item.id === id ? updated : item),\n                        isLoading: false,\n                        isAddFormOpen: false,\n                        isDetailPanelOpen: false,\n                        selectedItem: null\n                    }));\n                window.alert('항목을 수정했어요 ! !');\n            } catch (e) {\n                if (e.message.includes('400')) {\n                    window.alert('잘못 입력햇다 햇짠아 ! ! !');\n                } else if (e.message.includes('500')) {\n                    window.alert('서버가 주것습니다 -- ;;');\n                } else {\n                    window.alert('먼지 모를 오류라네요');\n                }\n                set({\n                    error: e.message,\n                    isLoading: false\n                });\n            }\n        },\n        deleteItem: async (id)=>{\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                await (0,_api_purchase__WEBPACK_IMPORTED_MODULE_0__.deletePurchaseItem)(id);\n                set((state)=>({\n                        items: state.items.filter((item)=>item.id !== id),\n                        isLoading: false,\n                        isAddFormOpen: false,\n                        isDetailPanelOpen: false,\n                        selectedItem: null\n                    }));\n                window.alert('항목을 삭제했어요.. 안녕 ~ ~');\n            } catch (e) {\n                if (e.message.includes('400')) {\n                    window.alert('잘못 입력햇다 햇짠아 ! ! !');\n                } else if (e.message.includes('500')) {\n                    window.alert('서버가 주것습니다 -- ;;');\n                } else {\n                    window.alert('먼지 모를 오류라네요');\n                }\n                set({\n                    error: e.message,\n                    isLoading: false\n                });\n            }\n        },\n        toggleItem: async (id)=>{\n            const currentItem = get().items.find((i)=>i.id === id);\n            if (!currentItem) return;\n            const newIsPurchased = !currentItem.isPurchased;\n            let newPurchasedDate = currentItem.purchasedDate;\n            // 체크박스가 해제되어 있는 아이템을 선택할 경우 (false -> true)\n            if (newIsPurchased && !currentItem.purchasedDate) {\n                // 오늘 날짜로 자동 설정\n                const today = new Date().toISOString().split('T')[0];\n                newPurchasedDate = today;\n            }\n            // 체크박스가 선택되어 있는 아이템을 해제할 경우 (true -> false)\n            // purchasedDate는 그대로 유지 (삭제하지 않음)\n            // isPurchased와 purchasedDate만 업데이트\n            const updateData = {\n                isPurchased: newIsPurchased\n            };\n            // purchasedDate가 변경된 경우에만 포함\n            if (newPurchasedDate !== currentItem.purchasedDate) {\n                updateData.purchasedDate = newPurchasedDate;\n            }\n            await get().updateItem(id, updateData);\n        },\n        selectItem: (item)=>{\n            set({\n                selectedItem: item\n            });\n        },\n        openDetailPanel: ()=>{\n            set({\n                isDetailPanelOpen: true\n            });\n        },\n        closeDetailPanel: ()=>{\n            set({\n                isDetailPanelOpen: false,\n                selectedItem: null\n            });\n        },\n        openAddForm: ()=>{\n            set({\n                isAddFormOpen: true\n            });\n        },\n        closeAddForm: ()=>{\n            set({\n                isAddFormOpen: false\n            });\n            get().resetPurchaseForm();\n        },\n        updatePurchaseForm: (field, value)=>{\n            set((state)=>({\n                    purchaseForm: {\n                        ...state.purchaseForm,\n                        [field]: value\n                    }\n                }));\n        },\n        resetPurchaseForm: ()=>{\n            set({\n                purchaseForm: initialPurchaseForm\n            });\n        },\n        reorderItems: (oldIndex, newIndex)=>{\n            set((state)=>{\n                const newItems = [\n                    ...state.items\n                ];\n                const [removed] = newItems.splice(oldIndex, 1);\n                newItems.splice(newIndex, 0, removed);\n                return {\n                    items: newItems\n                };\n            });\n        },\n        moveToCompleted: async (id)=>{\n            const item = get().items.find((i)=>i.id === id);\n            if (!item) return;\n            const today = new Date().toISOString().split('T')[0];\n            await get().updateItem(id, {\n                isPurchased: true,\n                purchasedDate: today\n            });\n        },\n        moveToPlanned: async (id)=>{\n            await get().updateItem(id, {\n                isPurchased: false,\n                purchasedDate: undefined\n            });\n        },\n        clearError: ()=>{\n            set({\n                error: null\n            });\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/shared/stores/checklistStore.ts\n"));

/***/ })

});